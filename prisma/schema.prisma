// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  password       String
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  preferences    UserPreference?
  workouts       Workout[]
  goals          Goal[]
  pushTokens     PushToken[]
  notificationSettings NotificationSetting?
}

model UserPreference {
  id             String    @id @default(uuid())
  userId         String    @unique
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  darkMode       Boolean   @default(false)
  language       String    @default("fr")
  measurementUnit String   @default("metric") // metric or imperial
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model NotificationSetting {
  id               String    @id @default(uuid())
  userId           String    @unique
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutReminders Boolean   @default(true)
  motivationalQuotes Boolean @default(true)
  goalAlerts       Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model PushToken {
  id        String   @id @default(uuid())
  token     String   @unique
  device    String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkoutCategory {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  color       String    @default("#4299e1") // Hexadecimal color code
  icon        String?   // Icon name or path
  workouts    Workout[]
  goals       Goal[]
  quotes      MotivationalQuote[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Workout {
  id           String         @id @default(uuid())
  date         DateTime
  categoryId   String
  category     WorkoutCategory @relation(fields: [categoryId], references: [id])
  duration     Int            // Duration in minutes
  intensity    Int            // Scale of 1-10
  notes        String?        @db.Text
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises    Exercise[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  shared       Boolean        @default(false)
  shareLink    String?        @unique
}

model Exercise {
  id          String    @id @default(uuid())
  name        String
  sets        Int
  reps        Int?
  weight      Float?
  distance    Float?    // For cardio exercises (km or miles)
  duration    Int?      // Duration in seconds
  notes       String?   @db.Text
  workoutId   String
  workout     Workout   @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Goal {
  id          String    @id @default(uuid())
  title       String
  description String?   @db.Text
  targetDate  DateTime?
  achieved    Boolean   @default(false)
  categoryId  String?
  category    WorkoutCategory? @relation(fields: [categoryId], references: [id])
  targetValue Float?
  valueType   String?   // "weight", "duration", "distance", etc.
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model MotivationalQuote {
  id          String   @id @default(uuid())
  text        String   @db.Text
  author      String?
  categoryId  String?
  category    WorkoutCategory? @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}